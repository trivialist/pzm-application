/*
 * TermGUI.java
 *
 * Created on 5. Januar 2006, 01:52
 */

package pzm.gui;

import pzm.dbcon.DB_projektzeit_Connect;
import pzm.core.Term;
import pzm.core.User;
import pzm.core.Project;
import java.sql.*;
import java.util.Date;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.logging.*;
import javax.swing.JOptionPane;

/**
 *
 * @author  hertel
 */
public class TermGUI extends javax.swing.JFrame {
    
    private static User activeUser = new User("","","");
    private static Connection con;
    private static Calendar cal;
    private static Term actTerm = new Term(0,0,0);
    private static Project proj = new Project(0,"","",0);;
    private static int mode;
    private boolean edit = false;
    
    
    /** Creates new form TermGUI
     * @param status
     * @param termID object of chosen term if mode is edit
     * @param user active user-object
     * @param cal object of chosen date
     * @param project String of chosen project
     */
    public TermGUI(int mode, Term term, User user, Calendar cal, Project project) {
        this.mode = mode;
        this.activeUser = user;
        this.actTerm = term;
        this.cal = cal;
        this.proj = project;
        initComponents();
        if(mode == 0) { //mode=0 -> edit
            edit = true;
            loadData(project.getProject());
        } else {        //mode=1 -> new Term
            edit = false;
            loadData("");
            jComboBoxProject.setSelectedItem(project.getProject());
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jComboBoxProject = new javax.swing.JComboBox();
        jComboBoxYear = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxMonth = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxDay = new javax.swing.JComboBox();
        jTextFieldDuration = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabelUserLogin = new javax.swing.JLabel();
        jLabelUserID = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jLabelError = new javax.swing.JLabel();
        jButtonSave = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldHours = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Zeiteinträge bearbeiten");

        jLabel2.setText("Projekt");

        jComboBoxProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProjectActionPerformed(evt);
            }
        });

        jLabel4.setText("Jahr");

        jLabel5.setText("Monat");

        jLabel6.setText("Tag");

        jLabel7.setText("Zeit");

        jLabel8.setText("min");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Mitarbeiter:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("ID:");

        jLabelUserLogin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabelUserID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jButtonCancel.setText("Abbrechen");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonSave.setText("Speichern");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jLabel12.setText("  h");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, 0)
                        .add(jLabelUserLogin)
                        .add(180, 180, 180)
                        .add(jLabel10))
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jComboBoxProject, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(30, 30, 30)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(70, 70, 70)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(40, 40, 40)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jComboBoxDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(20, 20, 20)
                        .add(jComboBoxMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(20, 20, 20)
                        .add(jComboBoxYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(jButtonSave)
                                .add(169, 169, 169)
                                .add(jButtonCancel))
                            .add(layout.createSequentialGroup()
                                .add(jTextFieldHours, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, 0)
                                .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, 0)
                                .add(jTextFieldDuration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(jLabel8))
                            .add(jLabelError, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .add(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jLabelUserLogin))
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxProject, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jComboBoxDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextFieldHours, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldDuration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelError, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButtonSave)
                    .add(jButtonCancel))
                .add(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(isSetAll()){
            setProject();
            if(edit == false) {
                saveTerm();
                this.setVisible(false);
                dispose();
            }
            else {
                editTerm(actTerm.getTermID());
                this.setVisible(false);
                dispose();
            }
        }        
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jComboBoxProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxProjectActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TermGUI(mode, actTerm, activeUser, cal, proj).setVisible(true);
            }
        });
    }
    
    public void loadData(String project) {
        String p = project;
        int[] year = new int[1101];
        int j = 0;
        for(int i=1900; i<=3000; i++) {
            year[j] = i;
            j++;
        }
        String[] month = {"Januar", "Februar", "März", "April", "Mai", "Juni",
                          "Juli", "August", "September", "Oktober", "November", 
                          "Dezember"};
        int[] day = new int[31];
        
        jLabelUserLogin.setText(activeUser.getUserLogin());
        jLabelUserID.setText(String.valueOf(activeUser.getUserID()));
        actTerm.setUserID(activeUser.getUserID());
        // ComboBox Year füllen 
        // jComboBoxYear.addItem("<Bitte wählen>");
        //for(int i=0; i<year.length; i++) {
            jComboBoxYear.addItem(proj.getProjYear());
        //}
        // ComboBox Month füllen
        jComboBoxMonth.addItem("<Bitte wählen>");
        for(int i=0;i<month.length;i++) {
            jComboBoxMonth.addItem(month[i]);
        }
        // ComboBox Month füllen
        for(int i=0; i<=30; i++) {
            day[i] = i+1;
        }
        jComboBoxDay.addItem("<Bitte wählen>");
        for(int i=0;i<day.length;i++) {
            jComboBoxDay.addItem(day[i]);
        }
        jComboBoxDay.setSelectedItem(cal.get(Calendar.DATE));
        jComboBoxMonth.setSelectedItem(month[cal.get(Calendar.MONTH)]);
        //jComboBoxYear.setSelectedItem(cal.get(Calendar.YEAR));
        initComboBoxProjects(cal.get(Calendar.YEAR));
        if(!p.equalsIgnoreCase("")) {
            setSelectedProject(p,cal.get(Calendar.YEAR));
        }
        if(edit) {

            if(actTerm.getDuration()>=60) {
                jTextFieldHours.setText(String.valueOf(getDurationHours(actTerm.getDuration())));
                jTextFieldDuration.setText(String.valueOf(getDurationMinutes(actTerm.getDuration())));
            } else {
                jTextFieldDuration.setText(String.valueOf(getDurationMinutes(actTerm.getDuration())));
            }
        }
    }
    
    /*
     * Funktion ermittelt alle aktiven Projekte aus der Tabelle Project
     * und füllt damit die Werteliste der jComboBoxProject
     */
    public void initComboBoxProjects(int year) {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();
        
        jComboBoxProject.removeAllItems();
        
        try {
            Statement stmt = con.createStatement();
            String sql = "SELECT Project, notActive, ProjYear FROM Project WHERE notActive=0 AND ProjYear=" + year + " ORDER BY Project ASC";

            ResultSet rst = stmt.executeQuery(sql);

            while(rst.next()) {
                jComboBoxProject.addItem(rst.getString("Project"));
            }
            rst.close();
            stmt.close();
        }
        catch(Exception e) {
            System.out.println(e.toString()); 
            Logger.getLogger(TermGUI.class.getName()).log(Level.SEVERE, null, e);
			JOptionPane.showMessageDialog(null, "Error in Class TermGUI.initComboBoxProjects().\n"
					+ "Eine SQL-Abfrage hat einen Fehler erzeugt!\n "
                                        + "Bitte kontaktieren Sie Ihren Ansprechpartner unter Angabe des Class-Eintrags.\n"
					+ "Die Anwendung wird nun beendet.", "Fehler", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        dbCon.closeDB(con);
    }
    
    /*
     * @param project
     * 
     * Setzt das in der Haupttabelle (MainGUI) gewählte Projekt in der
     * jComboBoxProject 
     */
    public void setSelectedProject(String project, int year) {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();
        
        try {
            Statement stmt = con.createStatement();
            String sql = "SELECT Project FROM Project WHERE Project='" + project + "' AND ProjYear=" + year;
                              
            ResultSet rst = stmt.executeQuery(sql);

            while(rst.next()) {
                jComboBoxProject.setSelectedItem(rst.getString("Project"));
            }
            rst.close();
            stmt.close();
        }
        catch(Exception e) {
            System.out.println(e.toString()); 
            Logger.getLogger(TermGUI.class.getName()).log(Level.SEVERE, null, e);
			JOptionPane.showMessageDialog(null, "Error in Class TermGUI.setSelectedProject().\n"
					+ "Eine SQL-Abfrage hat einen Fehler erzeugt!\n "
                                        + "Bitte kontaktieren Sie Ihren Ansprechpartner unter Angabe des Class-Eintrags.\n"
					+ "Die Anwendung wird nun beendet.", "Fehler", JOptionPane.ERROR_MESSAGE);
            System.exit(1); 
        }
        dbCon.closeDB(con);
    }


    public boolean isSetAll() {
        jLabelError.setForeground(new java.awt.Color(255, 0, 0));
        if(isSetDate()) {
            if(isSetDuration()) {
                return true;
            } else { return false; }
        } else { return false; }
    }
    

    public boolean isSetDate() {

        int year = new Integer(String.valueOf(jComboBoxYear.getSelectedItem())).intValue();
        int day = new Integer(String.valueOf(jComboBoxDay.getSelectedItem())).intValue();
        int month = -1;
        String monthString = String.valueOf(jComboBoxMonth.getSelectedItem());
        if(monthString.equals("Januar"))    { month = 0; }
        if(monthString.equals("Februar"))   { month = 1; }
        if(monthString.equals("März"))      { month = 2; }
        if(monthString.equals("April"))     { month = 3; }
        if(monthString.equals("Mai"))       { month = 4; }
        if(monthString.equals("Juni"))      { month = 5; }
        if(monthString.equals("Juli"))      { month = 6; }
        if(monthString.equals("August"))    { month = 7; }
        if(monthString.equals("September")) { month = 8; }
        if(monthString.equals("Oktober"))   { month = 9; }
        if(monthString.equals("November"))  { month = 10; }
        if(monthString.equals("Dezember"))  { month = 11; }

        if(!String.valueOf(year).equals("<Bitte wählen>")) {
            if(!String.valueOf(month).equals("<Bitte wählen>")) {
                if(!String.valueOf(day).equals("<Bitte wählen>")) {

                    cal.set(year, month, day);

                    return true;
                } else {
                    jLabelError.setText("Bitte Tag wählen");
                    return false;
                }
            } else {
                jLabelError.setText("Bitte Monat wählen");
                return false;
            }
        } else {
            jLabelError.setText("Bitte Jahr wählen");
            return false;
        }
    }

    public boolean isSetDuration() {
        if(!jTextFieldHours.getText().equals("") | !jTextFieldDuration.getText().equals("")) {
            if(jTextFieldHours.getText().equals("")) {
                actTerm.setDuration(new Integer(jTextFieldDuration.getText()).intValue());
                return true;
            }
            if(jTextFieldDuration.getText().equals("")) {
                actTerm.setDuration( (new Integer(jTextFieldHours.getText()).intValue()) * 60);
                return true;
            }
            else {
                actTerm.setDuration( ((new Integer(jTextFieldHours.getText()).intValue()) * 60) +
                        (new Integer(jTextFieldDuration.getText()).intValue()) );
                return true;
            }
        } else {
            jLabelError.setText("Bitte Dauer angeben");
            return false;
        }
    }

    //prueft und aendert ggf die Project ID auf das entsprechende Object
    //Notwendig, da Projecte eine Laufzeit von 12 + 1 Monate haben
    public void checkProjectID(){
        
      System.out.println(actTerm.getProjectID());
      System.out.println(cal);
      System.out.println(actTerm.getPrEnd());
      
         if(!cal.before(actTerm.getPrEnd())){
            
                 DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
                 dbCon.openDB();
                 con = dbCon.getCon();
               try {
            Statement stmt = con.createStatement();
            String sql = "SELECT ProjectID FROM Project WHERE Project='" + 
                           jComboBoxProject.getSelectedItem().toString() + 
                           "' AND ProjYear=" + jComboBoxYear.getSelectedItem().toString()+1;
                              
            ResultSet rst = stmt.executeQuery(sql);

            while(rst.next()) {
                actTerm.setProjectID(Integer.parseInt(rst.getString("ProjectID")));
                
            }
            rst.close();
            stmt.close();
        }
        catch(Exception e) {
            System.out.println(e.toString()); 
            Logger.getLogger(TermGUI.class.getName()).log(Level.SEVERE, null, e);
			JOptionPane.showMessageDialog(null, "Error in Class TermGUI.setSelectedProject().\n"
                                        + "Projekt für Zeitraum " + proj.getProjYear()+1 +"nicht angelegt\n"
					+ "Eine SQL-Abfrage hat einen Fehler erzeugt!\n "
                                        + "Bitte kontaktieren Sie Ihren Ansprechpartner unter Angabe des Class-Eintrags.\n"
					+ "Die Anwendung wird nun beendet.", "Fehler", JOptionPane.ERROR_MESSAGE);
            System.exit(1); 
        }
        dbCon.closeDB(con);
        }
    }

    public void saveTerm() {
        String minTemp = "0";
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();
        
        actTerm.setPrEnd();
         checkProjectID();

            try {
                Statement stmt = con.createStatement();
                String sql = "INSERT INTO Term (ProjectID, UserID, Duration, TermDate)" +
                             " VALUES ("  + actTerm.getProjectID() +
                             ", " + actTerm.getUserID() + ", " +
                             actTerm.getDuration() + ", '"
                             + String.valueOf(cal.get(Calendar.DAY_OF_MONTH))  + "."
                             + String.valueOf((cal.get(Calendar.MONTH))+ 1) + "."
                             + String.valueOf(cal.get(Calendar.YEAR)) + "')";
                stmt.executeUpdate(sql);
                stmt.close();
                if(!jTextFieldDuration.getText().equals("")) {
                    minTemp = jTextFieldDuration.getText();
                }
                jLabelError.setForeground(new java.awt.Color(0, 128, 0));
                jLabelError.setText("Der Zeit-Eintrag für das Projekt:" + String.valueOf(jComboBoxProject.getSelectedItem()) + ", ("
                                    + String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) + "."
                                    + String.valueOf((cal.get(Calendar.MONTH))+1) + "."
                                    + String.valueOf(cal.get(Calendar.YEAR)) + "), "
                                    + jTextFieldHours.getText() + "h "
                                    + minTemp + "min war erfolgreich.");
            }
            catch(Exception e) {
                Logger.getLogger(TermGUI.class.getName()).log(Level.SEVERE, null, e);
                            JOptionPane.showMessageDialog(null, "Error in Class TermGUI.saveTerm().\n"
                                            + "Ein SQL-Insert hat einen Fehler erzeugt!\n "
                                            + "Bitte kontaktieren Sie Ihren Ansprechpartner unter Angabe des Class-Eintrags.\n"
                                            + "Die Anwendung wird nun beendet.", "Fehler", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            }
            dbCon.closeDB(con);
    
    }

    public void editTerm(int tID) {
        String minTemp = "0";
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();

        try {
            Statement stmt = con.createStatement();
            String sql = "UPDATE Term SET ProjectID=" + actTerm.getProjectID()  + ", " +
                                           "Duration=" + actTerm.getDuration()   + ", " +
                                           "TermDate='" +  String.valueOf(cal.get(Calendar.DAY_OF_MONTH))    + "."
                                                        + String.valueOf((cal.get(Calendar.MONTH))+ 1)   + "."
                                                        + String.valueOf(cal.get(Calendar.YEAR))    + "' " +
                        "WHERE TermID=" + tID;

            stmt.executeUpdate(sql);
            stmt.close();
        }
        catch(Exception e) {
            Logger.getLogger(TermGUI.class.getName()).log(Level.SEVERE, null, e);
			JOptionPane.showMessageDialog(null, "Error in Class TermGUI.editTerm().\n"
					+ "Ein SQL-Update hat einen Fehler erzeugt!\n "
                                        + "Bitte kontaktieren Sie Ihren Ansprechpartner unter Angabe des Class-Eintrags.\n"
					+ "Die Anwendung wird nun beendet.", "Fehler", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        dbCon.closeDB(con);
    }

    
    /*
     * @param duration
     *
     *  ermittelt die vollen Stunden aus dem gegebenen Minutenwert
     *
     */
    public int getDurationHours(int duration) {
        return ((duration - (duration % 60)) / 60);
    }

    /*
     * @param duration
     *
     *  ermittelt die Minuten abzüglich der vollen Stunden aus dem gegebenen Minutenwert
     *
     */
    public int getDurationMinutes(int duration) {
        return duration % 60;
    }
    

    public boolean setProject() {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();
        
        if(!String.valueOf(jComboBoxProject.getSelectedItem()).equals("...")) {
            try {
                Statement stmt = con.createStatement();
                String sql = "SELECT Project, ProjectID FROM Project WHERE Project='" +
                             String.valueOf(jComboBoxProject.getSelectedItem()) + "'";
                ResultSet rst = stmt.executeQuery(sql);

                while(rst.next()) {
                    actTerm.setProjectID(rst.getInt("ProjectID"));
                }
                rst.close();
                stmt.close();
            } catch (Exception e) {
                System.out.println(e.toString()); 
                System.exit(1); 
            }
            dbCon.closeDB(con);
            return true;
        } else {
            jLabelError.setText("Bitte Projekt wählen");
            dbCon.closeDB(con);
            return false;
        }
    }

    /* Zeiteintrag ausschliesslich über Doppelklick auf Tabelle, daher muss die Projektgruppe nicht selbst gewählt werden, MH 05.01.2011

    public boolean isSetPrGroup() {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();

        if(!String.valueOf(jComboBoxPrGroup.getSelectedItem()).equals("<Bitte wählen>")) {
            try {
                Statement stmt = con.createStatement();
                String sql = "SELECT PrGroup, PrGroupID FROM PrGroup WHERE PrGroup='" +
                             String.valueOf(jComboBoxPrGroup.getSelectedItem()) + "'";
                ResultSet rst = stmt.executeQuery(sql);

                while(rst.next()) {
                    actTerm.setPrGroupID(rst.getInt("PrGroupID"));
                }
                rst.close();
                stmt.close();
            } catch (Exception e) {
                System.out.println(e.toString());
                System.exit(1);
            }
            dbCon.closeDB(con);
            return true;
        } else {
            jLabelError.setText("Bitte Projektgruppe wählen");
            dbCon.closeDB(con);
            return false;
        }
    }
    *
    */


    /* Die Eingabe einer Aktivität wurde entfernt. MH, 05.01.2011

     public boolean isSetActivity() {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();
        
        try {
                    Statement stmt = con.createStatement();
                    String sql = "SELECT Activity, ActivityID FROM Activity WHERE Activity='" +
                                 String.valueOf(jComboBoxActivity.getSelectedItem()) + "'";
                    ResultSet rst = stmt.executeQuery(sql);

                    while(rst.next()) {
                        actTerm.setActivityID(rst.getInt("ActivityID"));
                    }
                    rst.close();
                    stmt.close();
                } catch (Exception e) {
                    System.out.println(e.toString()); 
                    System.exit(1); 
                }
                dbCon.closeDB(con);
                return true;
    }
     *
     */

    /*  Projektgruppe wird für einen Zeiteintrag nicht mehr benötigt; 12.01.2011 MH
     *
     public String getPrGroup(String project) {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();
        String prGroup = "";
        int prGrID = -1;

        try {
            Statement stmt = con.createStatement();
            String sql = "SELECT PrGroupID, Project FROM Project WHERE Project='" + project + "'";
            ResultSet rst = stmt.executeQuery(sql);

            while(rst.next()) {
                prGrID = rst.getInt("PrGroupID");
            }
            rst.close();
            // Projektgruppe zu ProjectID finden
            sql = "SELECT PrGroup, PrGroupID FROM PrGroup WHERE PrGroupID=" + prGrID;
            ResultSet rst2 = stmt.executeQuery(sql);

            while(rst2.next()) {
                prGroup = rst2.getString("PrGroup");
            }
            rst2.close();
            stmt.close();
        }
        catch(Exception e) {
            System.out.println(e.toString());
            dbCon.closeDB(con);
            System.exit(1);
        }
        dbCon.closeDB(con);
        return prGroup;
    }
     *
     */

    /* Projektgruppen werden für die Zeiteingabe nicht mehr benötigt
    public void getAllPrGroups() {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();

        try {
            Statement stmt = con.createStatement();
            String sql = "SELECT PrGroup FROM PrGroup";
            ResultSet rst = stmt.executeQuery(sql);

            while(rst.next()) {
                jComboBoxPrGroup.addItem(rst.getString("PrGroup"));
            }
            rst.close();
            stmt.close();
        }
        catch(Exception e) {
            System.out.println(e.toString());
            System.exit(1);
        }
        dbCon.closeDB(con);
    }
    *
    */


    /* Aktivitäten werden nicht mehr benötigt, MH 05.01.2011

    public void getAllActivities() {
        DB_projektzeit_Connect dbCon = new DB_projektzeit_Connect();
        dbCon.openDB();
        con = dbCon.getCon();

        try {
            Statement stmt = con.createStatement();
            String sql = "SELECT Activity FROM Activity";
            ResultSet rst = stmt.executeQuery(sql);

            while(rst.next()) {
                jComboBoxActivity.addItem(rst.getString("Activity"));
            }
            rst.close();
            stmt.close();
        }
        catch(Exception e) {
            System.out.println(e.toString());
            System.exit(1);
        }
        dbCon.closeDB(con);
    }
    *
    */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxDay;
    private javax.swing.JComboBox jComboBoxMonth;
    private javax.swing.JComboBox jComboBoxProject;
    private javax.swing.JComboBox jComboBoxYear;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelUserID;
    private javax.swing.JLabel jLabelUserLogin;
    private javax.swing.JTextField jTextFieldDuration;
    private javax.swing.JTextField jTextFieldHours;
    // End of variables declaration//GEN-END:variables
    
}
